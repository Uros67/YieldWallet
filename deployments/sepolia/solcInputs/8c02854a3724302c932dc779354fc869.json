{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IYDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IYDAI {\n    function deposit(uint _amount) external;\n    function withdraw(uint _shares) external;\n    function balanceOf(address account) external view returns (uint);\n    function getPricePerFullShare() external view returns (uint);\n}"
    },
    "contracts/interfaces/IYtoken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IYtoken {\n    function deposit(uint _amount) external;\n    function withdraw(uint _shares) external;\n    function balanceOf(address account) external view returns (uint);\n    function getPricePerFullShare() external view returns (uint);\n}"
    },
    "contracts/interfaces/IYUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IYUSDC {\n    function deposit(uint _amount) external;\n    function withdraw(uint _shares) external;\n    function balanceOf(address account) external view returns (uint);\n    function getPricePerFullShare() external view returns (uint);\n}"
    },
    "contracts/interfaces/IYUSDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IYUSDT {\n    function deposit(uint _amount) external;\n    function withdraw(uint _shares) external;\n    function balanceOf(address account) external view returns (uint);\n    function getPricePerFullShare() external view returns (uint);\n}"
    },
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IYDAI.sol\";\nimport \"./interfaces/IYUSDC.sol\";\nimport \"./interfaces/IYUSDT.sol\";\n\n\ncontract Wallet {\n    address admin;\n\n    IERC20 dai= IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    IYDAI yDai= IYDAI(0xC2cB1040220768554cf699b0d863A3cd4324ce32);\n\n    IERC20 usdc= IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    IYUSDC yUsdc= IYUSDC(0x26EA744E5B887E5205727f55dFBE8685e3b21951);\n\n    IERC20 usdt= IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n    IYUSDT yUsdt= IYUSDT(0xE6354ed5bC4b393a5Aad09f21c46E101e692d447);\n\n\n    constructor() {\n        admin= msg.sender;\n        \n    }\n    function save(uint256 amount)external {\n        dai.transferFrom(msg.sender, address(this), amount);\n        _save(amount);\n    }\n    function spend(uint256 amount, address receipent) external {\n        require(msg.sender== admin, \"Only admin!\");\n        uint256 balanceShares= yDai.balanceOf(address(this));\n        yDai.withdraw(balanceShares);\n        dai.transfer(receipent, amount);\n        uint256 balanceDai=dai.balanceOf(address(this));\n        if(balanceDai > 0){\n            _save(balanceDai);\n        }\n\n    }\n    function _save(uint256 amount) internal {\n        dai.approve(address(yDai), amount);\n        yDai.deposit(amount);\n    }\n    function balance() external view returns(uint256){\n        uint256 price= yDai.getPricePerFullShare();\n        uint256 balanceShares= yDai.balanceOf(address(this));\n        return (price * balanceShares);\n\n    }\n//     // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./interfaces/IYtoken.sol\";\n\n\n\n// contract Wallet {\n//     address admin;\n\n//     IERC20 dai= IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n//     IYtoken yDai= IYtoken(0xC2cB1040220768554cf699b0d863A3cd4324ce32);\n\n//     IERC20 usdc= IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n//     IYtoken yUsdc= IYtoken(0x26EA744E5B887E5205727f55dFBE8685e3b21951);\n\n//     IERC20 usdt= IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n//     IYtoken yUsdt= IYtoken(0xE6354ed5bC4b393a5Aad09f21c46E101e692d447);\n\n//     IERC20 token;\n//     IYtoken yToken;\n\n\n//     constructor() {\n//         admin= msg.sender;\n//         token= dai;\n//         yToken= yDai;\n        \n//     }\n//     function save(uint256 amount) external {\n//         token.transferFrom(msg.sender, address(this), amount);\n//         _save(amount);\n//     }\n//     function spend(uint256 amount, address receipent) external {\n//         require(msg.sender== admin, \"Only admin!\");\n//         uint256 balanceShares= yToken.balanceOf(address(this));\n//         yToken.withdraw(balanceShares);\n//         token.transfer(receipent, amount);\n//         uint256 balanceToken=token.balanceOf(address(this));\n//         if(balanceToken > 0){\n//             _save(balanceToken);\n//         }\n\n//     }\n//     function _save(uint256 amount) internal {\n//         token.approve(address(yDai), amount);\n//         yToken.deposit(amount);\n//     }\n//     function balance() external view returns(uint256){\n//         uint256 price= yToken.getPricePerFullShare();\n//         uint256 balanceShares= yToken.balanceOf(address(this));\n//         return (price * balanceShares);\n\n//     }\n//     function changeToken(string calldata tokenName) external{\n//         if(keccak256(abi.encodePacked((tokenName))) == keccak256(abi.encodePacked((\"dai\")))){\n//             token= dai;\n//             yToken= yDai;\n\n//         }\n//         if(keccak256(abi.encodePacked((tokenName))) == keccak256(abi.encodePacked((\"usdc\")))){\n//             token= usdc;\n//             yToken= yUsdc;\n\n//         }\n//         if(keccak256(abi.encodePacked((tokenName))) == keccak256(abi.encodePacked((\"usdt\")))){\n//             token= usdt;\n//             yToken= yUsdt;\n\n//         }\n//     }\n// }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}